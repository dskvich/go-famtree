basePath: /api
consumes:
- application/json
definitions:
  Error:
    properties:
      code:
        format: int64
        type: integer
        x-go-name: Code
      message:
        type: string
        x-go-name: Message
    type: object
    x-go-package: github.com/joffrua/go-famtree/internal/infra/httpserver
  Person:
    properties:
      bio:
        type: string
        x-go-name: Bio
      birth_date:
        type: string
        x-go-name: BirthDate
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      death_date:
        type: string
        x-go-name: DeathDate
      father_id:
        format: uuid
        type: string
        x-go-name: FatherID
      first_name:
        type: string
        x-go-name: FirstName
      id:
        format: uuid
        type: string
        x-go-name: ID
      last_name:
        type: string
        x-go-name: LastName
      maiden_name:
        type: string
        x-go-name: MaidenName
      mother_id:
        format: uuid
        type: string
        x-go-name: MotherID
      patronymic:
        type: string
        x-go-name: Patronymic
      tree_id:
        format: uuid
        type: string
        x-go-name: TreeID
    type: object
    x-go-package: github.com/joffrua/go-famtree/internal/domain
  Tree:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      description:
        type: string
        x-go-name: Description
      id:
        format: uuid
        type: string
        x-go-name: ID
      name:
        type: string
        x-go-name: Name
    type: object
    x-go-package: github.com/joffrua/go-famtree/internal/domain
  UUID:
    description: |-
      A UUID is a 128 bit (16 byte) Universal Unique IDentifier as defined in RFC
      4122.
    items:
      format: uint8
      type: integer
    type: array
    x-go-package: github.com/google/uuid
  User:
    properties:
      created_at:
        format: date-time
        type: string
        x-go-name: CreatedAt
      email:
        format: email
        type: string
        x-go-name: Email
      id:
        format: uuid
        type: string
        x-go-name: ID
      lang:
        type: string
        x-go-name: Lang
      login:
        type: string
        x-go-name: Login
      name:
        type: string
        x-go-name: Name
      role:
        type: string
        x-go-name: Role
    type: object
    x-go-package: github.com/joffrua/go-famtree/internal/domain
info:
  description: Some description
  title: Go Family Tree API
  version: 1.0.0
paths:
  /trees:
    get:
      description: List all trees
      operationId: getAllTrees
      responses:
        "200":
          description: Tree
          schema:
            items:
              $ref: '#/definitions/Tree'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/Error'
      summary: List all trees
      tags:
      - Trees
    post:
      description: Create by json tree
      operationId: newTree
      parameters:
      - in: body
        name: tree
        required: true
        schema:
          $ref: '#/definitions/Tree'
        x-go-name: Tree
      responses:
        "201":
          description: Tree
          schema:
            $ref: '#/definitions/Tree'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/Error'
      summary: Create a new tree
      tags:
      - Trees
  /trees/{tree_id}:
    delete:
      description: Delete by tree ID
      operationId: deleteTree
      parameters:
      - format: uuid
        in: path
        name: tree_id
        required: true
        type: string
        x-go-name: TreeID
      responses:
        "204":
          description: ""
        "400":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/Error'
      summary: Delete a tree
      tags:
      - Trees
    get:
      description: Get a tree by ID
      operationId: getTree
      parameters:
      - format: uuid
        in: path
        name: tree_id
        required: true
        type: string
        x-go-name: TreeID
      responses:
        "200":
          description: Tree
          schema:
            $ref: '#/definitions/Tree'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/Error'
      summary: Get a tree
      tags:
      - Trees
    put:
      description: Update by json tree
      operationId: updateTree
      parameters:
      - format: uuid
        in: path
        name: tree_id
        required: true
        type: string
        x-go-name: TreeID
      - in: body
        name: tree
        required: true
        schema:
          $ref: '#/definitions/Tree'
        x-go-name: Tree
      responses:
        "200":
          description: Tree
          schema:
            $ref: '#/definitions/Tree'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/Error'
      summary: Update a tree
      tags:
      - Trees
  /users:
    get:
      description: List all users
      operationId: getAllUsers
      responses:
        "200":
          description: User
          schema:
            items:
              $ref: '#/definitions/User'
            type: array
        "400":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/Error'
      summary: List all users
      tags:
      - Users
  /users/{user_id}:
    get:
      description: Get a user by ID
      operationId: getUser
      parameters:
      - format: uuid
        in: path
        name: user_id
        required: true
        type: string
        x-go-name: UserID
      responses:
        "200":
          description: User
          schema:
            $ref: '#/definitions/User'
        "400":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "404":
          description: Error
          schema:
            $ref: '#/definitions/Error'
        "500":
          description: Error
          schema:
            $ref: '#/definitions/Error'
      summary: Get a user
      tags:
      - Users
produces:
- application/json
schemes:
- http
swagger: "2.0"
