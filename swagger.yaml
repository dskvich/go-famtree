swagger: "2.0"
info:
  version: 1.0.0
  title: Family Tree

basePath: /api
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json

paths:
  /v1/users:
    get:
      summary: Get all users
      operationId: getUsers
      tags:
        - Users
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: '#/definitions/User'
        default:
          $ref: '#/responses/Error'
    post:
      summary: Create a new user
      operationId: createUser
      tags:
        - Users
      parameters:
        - in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/User'
        default:
          $ref: '#/responses/Error'

  /v1/users/{userId}:
    get:
      summary: Get a user by ID
      operationId: getUserById
      tags:
        - Users
      parameters:
        - $ref: "#/parameters/UserIdParam"
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/User'
        default:
          $ref: '#/responses/Error'
    put:
      summary: Update a user by ID
      operationId: updateUserById
      tags:
        - Users
      parameters:
        - $ref: "#/parameters/UserIdParam"
        - in: body
          name: user
          required: true
          schema:
            $ref: "#/definitions/User"
      responses:
        "204":
          description: No content
        default:
          $ref: '#/responses/Error'
    delete:
      tags:
        - Users
      summary: Deletes a user by ID
      operationId: deleteUserById
      parameters:
        - $ref: "#/parameters/UserIdParam"
      responses:
        "204":
          description: No content
        default:
          $ref: '#/responses/Error'

  /v1/users/{userId}/trees:
    get:
      summary: Get all trees for a user
      operationId: getAllTreesForUser
      tags:
        - Trees
      parameters:
        - $ref: "#/parameters/UserIdParam"
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Tree"
        default:
          $ref: '#/responses/Error'
    post:
      summary: Create a new tree for a user
      operationId: createTreeForUser
      tags:
        - Trees
      parameters:
        - $ref: "#/parameters/UserIdParam"
        - in: body
          name: tree
          required: true
          schema:
            $ref: "#/definitions/Tree"
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/Tree'
        default:
          $ref: '#/responses/Error'

  /v1/users/{userId}/trees/{treeId}:
    get:
      summary: Get a tree by ID
      operationId: getTreeById
      tags:
        - Trees
      parameters:
        - $ref: "#/parameters/UserIdParam"
        - $ref: "#/parameters/TreeIdParam"
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/Tree'
        default:
          $ref: '#/responses/Error'
    put:
      summary: Update a tree by ID
      operationId: updateTreeById
      tags:
        - Trees
      parameters:
        - $ref: "#/parameters/UserIdParam"
        - $ref: "#/parameters/TreeIdParam"
        - in: body
          name: tree
          required: true
          schema:
            $ref: "#/definitions/Tree"
      responses:
        "204":
          description: No content
        default:
          $ref: '#/responses/Error'
    delete:
      summary: Delete a tree by ID
      operationId: deleteTreeById
      tags:
        - Trees
      parameters:
        - $ref: "#/parameters/UserIdParam"
        - $ref: "#/parameters/TreeIdParam"
      responses:
        "204":
          description: No content
        default:
          $ref: '#/responses/Error'

  /v1/users/{userId}/trees/{treeId}/people:
    post:
      summary: Create a new person in a tree
      operationId: createPersonForTree
      tags:
        - People
      parameters:
        - $ref: "#/parameters/UserIdParam"
        - $ref: "#/parameters/TreeIdParam"
        - in: body
          name: person
          required: true
          schema:
            $ref: "#/definitions/Person"
      responses:
        "201":
          description: OK
          schema:
            $ref: "#/definitions/Person"
        default:
          $ref: "#/responses/Error"

  /v1/users/{userId}/trees/{treeId}/people/{personId}:
    put:
      summary: Update a person by ID
      operationId: updatePersonById
      tags:
        - People
      parameters:
        - $ref: "#/parameters/UserIdParam"
        - $ref: "#/parameters/TreeIdParam"
        - $ref: "#/parameters/PersonIdParam"
        - in: body
          name: person
          required: true
          schema:
            $ref: "#/definitions/Person"
      responses:
        "204":
          description: No content
        default:
          $ref: "#/responses/Error"
    delete:
      summary: Delete a person by ID
      operationId: deletePersonById
      tags:
        - People
      parameters:
        - $ref: "#/parameters/UserIdParam"
        - $ref: "#/parameters/TreeIdParam"
        - $ref: "#/parameters/PersonIdParam"
      responses:
        "204":
          description: No Content
        default:
          $ref: "#/responses/Error"

parameters:
  UserIdParam:
    in: path
    name: userId
    required: true
    type: string
    format: uuid

  TreeIdParam:
    in: path
    name: treeId
    required: true
    type: string
    format: uuid

  PersonIdParam:
    in: path
    name: personId
    required: true
    type: string
    format: uuid

definitions:
  User:
    type: object
    required:
      - login
      - name
    properties:
      id:
        type: string
        format: uuid
      login:
        type: string
      name:
        type: string
      email:
        type: string
        format: email
      password:
        type: string
        format: password

  Person:
    type: object
    required:
      - name
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      father_id:
        type: string
        format: uuid
        description: The ID of the person's father, if known
      mother_id:
        type: string
        format: uuid
        description: The ID of the person's mother, if known
      children:
        type: array
        items:
          $ref: "#/definitions/Person"

  Tree:
    type: object
    required:
      - name
      - user_id
    properties:
      id:
        type: string
        format: uuid
      name:
        type: string
      user_id:
        type: string
        format: uuid
        description: The ID of the user who owns the tree
      root_id:
        type: string
        format: uuid
        description: The ID of the root person in the tree, if any

responses:
  Error:
    description: An error occurred
    schema:
      type: object
      properties:
        message:
          type: string